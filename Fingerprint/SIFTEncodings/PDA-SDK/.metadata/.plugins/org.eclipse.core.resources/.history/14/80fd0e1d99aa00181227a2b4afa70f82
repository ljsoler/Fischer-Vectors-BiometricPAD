#include "PDA_testing.h"
#include <stdio.h>
#include <math.h>
#include <omp.h>
#include <vl/dsift.h>
#include <vector>
#include "common.h"
#include "kmeans.h"
#include <sys/stat.h>
#include <vl/kmeans.h>
#include <vl/vlad.h>
#include <vl/fisher.h>
#include <vl/mathop.h>
#include "Fisher_encoding.h"
#include "Vlad_encoding.h"
#include "Bovw_encoding.h"
#include <vl/svm.h>
#include "random_sampling.h"
#include <ctime>
#include <time.h>
#include <sys/timeb.h>
#ifdef WIN32
	#include <direct.h>
	#include <process.h>	
#else
#include <sys/types.h>
#include <unistd.h>
#endif

#define max_iter 100
#define epsilon 0.001000
#define svm_C 10
#define nr_classes 2
#define img_size 170
#define chunk_size 20
#define sample_prefix "/sample_descriptors"
#define descriptors_prefix "/descriptors_chunk_"
#define descriptors_folder "/descriptors_folder"
#define fv_folder "/fv_folder_"
#define vlad_folder "/vlad_folder_"
#define vlad_descriptor "/vlad_descriptors"
#define fv_descriptors_prefix "/fv_descriptors"
#define pca_descriptors_prefix "/pca_descriptors"
#define bovw_model_prefix "/bovw_model"
#define ext ".bin"
#define suffix "_info.bin"
#define svm_model_name "svm_model"

using namespace std;
using namespace cv;
using namespace dimension_reduction;
using namespace visual_features;
using namespace clustering_and_indexing;

namespace classifier_testing
{
	void PDAfV_Classify(extract_params params, dsift_extraction_params dsift_params)
	{
		vector<string> imgs_url;
		vector<string> img_bmp;
		get_files(params.imageDir, ".png", imgs_url);		
		get_files(params.imageDir, ".bmp", img_bmp);
		imgs_url.insert(imgs_url.end(), img_bmp.begin(), img_bmp.end());
		int db_size = imgs_url.size();	

		float* means = NULL, *sigmas = NULL, *weights = NULL;					
		string output_path(params.outputDir);
		if (gmm::load_gmm_results_binary(output_path + "/", "pad", means, sigmas, weights, params.num_cluster, params.pca_dim) < 0)
		{
			cout << "GMM MODEL NOT FOUND\n";
			return;
		}
	
		float* descriptors_means;
		float* eigenvalues;
		float* eigenvectors;
		int pca_dim = 0;
		int dimension = 0;
		string pca_path(params.outputDir);
		pca_path += "/pca_model.bin";
		if(!is_file_exist(pca_path.c_str()))
		{
			cout << "PCA MODEL NOT FOUND\n";
			return;
		}
		else
		{
			printf("Loading PCA model...\n");
			pca::load_model(pca_path, &descriptors_means, &eigenvectors, &eigenvalues, &pca_dim, &dimension);
		}

		string model_path(string(params.outputDir) + '/' + svm_model_name + ext);	
		string t_path_model = model_path;
		size_t idx_model = model_path.find_last_of('.');						
		t_path_model.insert(idx_model, "_info");
		int dim = 0;
		float* model[nr_classes];
		float bias[nr_classes];
		printf("Loading SVM model...\n");
		if(!is_file_exist(model_path.c_str()) && !is_file_exist(t_path_model.c_str()))
		{
			cout << "MODEL NOT FOUND\n";
			return;
		}
		else if (load_model(model_path, model, bias, &dim, nr_classes) < 0)
		{
			cout << "CORRUPT MODEL DATA\n";
		}	
		int fake_count = 0, live_count = 0;
		double* labels = GetLabels(imgs_url, "live", &fake_count, &live_count);
		double fsar = 0;
		double flrr = 0;
		float* results = (float*)malloc(sizeof(float)*db_size);
		printf("Processing %d images\n", db_size);
		//omp_set_num_threads(2);
			//timeb ini, end;	
		//ftime(&ini);
	#pragma omp parallel for 	
		for (int i = 0; i < db_size; i++)
		{
			int real_label = (int)labels[i];	
		
			Mat img_i = readImage(imgs_url[i]);
			if (img_i.empty()) {
				cout << "ERROR" << endl;
				continue;
			}
			if (dsift_params.scale_factor > 1)
			{
				Mat temp;
				resize(img_i, temp, Size(img_i.cols*dsift_params.scale_factor, img_i.rows*dsift_params.scale_factor));
				img_i = temp;
			}
			printf("Proccesing image %i from %i\n", i + 1, imgs_url.size());
			vector<float> desc = compute_for_image(img_i, dsift_params);
				
			float* reduced_descriptors = pca::project(&desc[0], desc.size()/ params.sift_dim, params.sift_dim, descriptors_means, eigenvectors, pca_dim);
			int dim_reduced_desc = (desc.size()/ params.sift_dim)*pca_dim;		
			float* enc = fisher::fisher_encoding(means, sigmas, weights, reduced_descriptors, dim_reduced_desc/pca_dim, pca_dim, params.num_cluster);
			free(reduced_descriptors);
			double probability[nr_classes];
			int model_size = dim;
			for (int j = 0; j < nr_classes; j++)
			{
				probability[j] = 0;
				for (int k = 0; k < model_size; k++)
					probability[j] += (enc[k] * model[j][k]);
				probability[j] += bias[j];
			}		
			vl_free(enc);
			int label = (MAX(probability[0], probability[1]) == probability[0]) ? -1: 1;
			//int label = (probability[0] > 0) ? 1 : -1;
			//printf("Probability vector (%f, %f)\n", probability[0], probability[1]);
			results[i] = probability[1];		
			//printf("Label prediction %i - real label %i\n", (int)label, real_label);				
		}
		//ftime(&end);
		//int end_time = (end.time - ini.time) * 1000 + (end.millitm - ini.millitm);
		//printf("%d\n", end_time);		
		//printf("%d\n", end_time/db_size);		
		for (int i = 0; i < nr_classes; i++)
			free(model[i]);

		/*for (int i = 0; i < db_size; i++)
		{
			int diff = results[i] + (int)labels[i];
			printf("Label prediction %i - real label %i\n", results[i], (int)labels[i]);
			if(diff == 0)
			{
				if (labels[i] == 1)
					flrr++;
				else
					fsar++;
			}
		}*/


		//string output_path(params.outputDir);
		output_path += "/";
		output_path += params.database_name;
		output_path += ".txt";
		FILE* fl = fopen(output_path.c_str(), "wb");

		/*fprintf(fl, "Missclassified fake fingerprint = %f\n", fsar);
		fprintf(fl, "Missclassified live fingerprint = %f\n", flrr);

		printf("Missclassified fake fingerprint = %f\n", fsar);
		printf("Missclassified live fingerprint = %f\n", flrr);
		flrr /= (double)live_count;
		fsar /= (double)fake_count;
		double ace = (double)(flrr + fsar)/2;
		printf("FSAR value = %f\n", fsar);
		printf("FLRR value = %f\n", flrr);
		printf("ACE value = %f\n", 100*ace);

		fprintf(fl, "FSAR value = %f\n", fsar);
		fprintf(fl, "FLRR value = %f\n", flrr);
		fprintf(fl, "ACE value = %f\n", 100*ace);*/
		for (int i = 0; i < db_size; i++)
			fprintf(fl, "%s: %f\n", imgs_url[i].c_str(), results[i]);
		fclose(fl);
		free(labels);
		free(results);
		free(means);
		free(sigmas);
		free(weights);	
		free(eigenvalues);
		free(eigenvectors);
		free(descriptors_means);
	}

	void PDAVlad_Classify(extract_params params, dsift_extraction_params dsift_params)
	{
		vector<string> imgs_url;
		vector<string> img_bmp;
		get_files(params.imageDir, ".png", imgs_url);		
		get_files(params.imageDir, ".bmp", img_bmp);
		imgs_url.insert(imgs_url.end(), img_bmp.begin(), img_bmp.end());
		int db_size = imgs_url.size();	

		string bovw_path(params.outputDir);
		bovw_path += bovw_model_prefix;
		bovw_path += ext;
		float* centers;
		int num_center = params.num_cluster;				
		int dim_vocab = 0;
		if(kmeans::load_kmeans_results_binary(bovw_path, &centers, dim_vocab, num_center) < 0)
		{
			cout << "BOVW MODEL NOT FOUND\n";
			return;
		}		
		
		VlKDForest* forest = kmeans::build_kdtree(centers, num_center, dim_vocab, 2);		
	
		float* descriptors_means;
		float* eigenvalues;
		float* eigenvectors;
		int pca_dim = 0;
		int dimension = 0;
		string pca_path(params.outputDir);
		pca_path += "/pca_model.bin";
		if(!is_file_exist(pca_path.c_str()))
		{
			cout << "PCA MODEL NOT FOUND\n";
			return;
		}
		else
		{
			printf("Loading PCA model...\n");
			pca::load_model(pca_path, &descriptors_means, &eigenvectors, &eigenvalues, &pca_dim, &dimension);
		}

		string model_path(string(params.outputDir) + '/' + svm_model_name + ext);	
		string t_path_model = model_path;
		size_t idx_model = model_path.find_last_of('.');						
		t_path_model.insert(idx_model, "_info");
		int dim = 0;
		float* model[nr_classes];
		float bias[nr_classes];
		printf("Loading SVM model...\n");
		if(!is_file_exist(model_path.c_str()) && !is_file_exist(t_path_model.c_str()))
		{
			cout << "MODEL NOT FOUND\n";
			return;
		}
		else if (load_model(model_path, model, bias, &dim, nr_classes) < 0)
		{
			cout << "CORRUPT MODEL DATA\n";
		}	
		int fake_count = 0, live_count = 0;
		double* labels = GetLabels(imgs_url, "live", &fake_count, &live_count);
		double fsar = 0;
		double flrr = 0;
		float* results = (float*)malloc(sizeof(float)*db_size);
		printf("Processing %d images\n", db_size);
	#pragma omp parallel for
		//timeb ini, end;
		//ftime(&ini);
		for (int i = 0; i < db_size; i++)
		{
			int real_label = (int)labels[i];	
		
			Mat img_i = readImage(imgs_url[i]);
			if (img_i.empty()) {
				cout << "ERROR" << endl;
				continue;
			}

			if(dsift_params.scale_factor > 1)
			{
				Mat temp;
				resize(img_i, temp, Size(img_i.cols*dsift_params.scale_factor, img_i.rows*dsift_params.scale_factor));
				img_i = temp;
			}

			//printf("Proccesing image %i from %i \n name %s\n", i + 1, imgs_url.size(), imgs_url[i]);

			//printf("Extracting SIFT\n");
			vector<float> desc = compute_for_image(img_i, dsift_params);
			
			//printf("PCA reduction\n");
			float* reduced_descriptors = pca::project(&desc[0], desc.size()/ params.sift_dim, params.sift_dim, descriptors_means, eigenvectors, pca_dim);
			int dim_reduced_desc = (desc.size()/ params.sift_dim)*pca_dim;		
			//printf("Vlad Encoding\n");
			float* enc = vlad::vlad_encoding(forest, centers, reduced_descriptors, dim_reduced_desc/pca_dim, pca_dim, num_center);
			free(reduced_descriptors);
			double probability[nr_classes];
			int model_size = dim;
			//printf("SVM Classification\n");
			for (int j = 0; j < nr_classes; j++)
			{
				probability[j] = 0;
				for (int k = 0; k < model_size; k++)
					probability[j] += (enc[k] * model[j][k]);
				probability[j] += bias[j];
			}		
			vl_free(enc);
			int label = (MAX(probability[0], probability[1]) == probability[0]) ? -1: 1;
			//int label = (probability[0] > 0) ? 1 : -1;
			printf("Probability vector (%f, %f)\n", probability[0], probability[1]);
			results[i] = probability[1];		
			printf("Label prediction %i - real label %i\n", label, real_label);
				
		}
//		ftime(&end);
//		int end_time = (end.time - ini.time) * 1000 + (end.millitm - ini.millitm);
//		printf("%d\n", end_time);
//		printf("%d\n", end_time/db_size);
		for (int i = 0; i < nr_classes; i++)
			free(model[i]);
	

		/*for (int i = 0; i < db_size; i++)
		{
			int diff = results[i] + (int)labels[i];
			printf("Label prediction %i - real label %i\n", results[i], (int)labels[i]);
			if(diff == 0)
			{
				if (labels[i] == 1)
					flrr++;
				else
					fsar++;
			}
		}*/
		//string output_path(params.outputDir);
		string output_path(params.outputDir);
		output_path	+= "/";
		output_path += params.database_name;
		output_path += ".txt";
		FILE* fl = fopen(output_path.c_str(), "wb");

		/*fprintf(fl, "Missclassified fake fingerprint = %f\n", fsar);
		fprintf(fl, "Missclassified live fingerprint = %f\n", flrr);

		printf("Missclassified fake fingerprint = %f\n", fsar);
		printf("Missclassified live fingerprint = %f\n", flrr);
		flrr /= (double)live_count;
		fsar /= (double)fake_count;
		double ace = (double)(flrr + fsar)/2;
		printf("FSAR value = %f\n", fsar);
		printf("FLRR value = %f\n", flrr);
		printf("ACE value = %f\n", 100*ace);

		fprintf(fl, "FSAR value = %f\n", fsar);
		fprintf(fl, "FLRR value = %f\n", flrr);
		fprintf(fl, "ACE value = %f\n", 100*ace);*/
		for (int i = 0; i < db_size; i++)
			fprintf(fl, "%f\n", results[i]);
		

		fclose(fl);
		free(labels);
		free(results);
		free(centers);
		free(eigenvalues);
		free(eigenvectors);
		free(descriptors_means);
	}

	void PDABoW_Classify(extract_params params, dsift_extraction_params dsift_params)
	{
		vector<string> imgs_url;
		vector<string> img_bmp;
		get_files(params.imageDir, ".png", imgs_url);		
		get_files(params.imageDir, ".bmp", img_bmp);
		imgs_url.insert(imgs_url.end(), img_bmp.begin(), img_bmp.end());
		int db_size = imgs_url.size();	

		string bovw_path(params.outputDir);
		bovw_path += bovw_model_prefix;
		bovw_path += ext;
		float* centers;
		int num_center = params.num_cluster;				
		int dim_vocab = 0;
		if(kmeans::load_kmeans_results_binary(bovw_path, &centers, dim_vocab, num_center) < 0)
		{
			cout << "BOVW MODEL NOT FOUND\n";
			return;
		}		
		
		VlKDForest* forest = kmeans::build_kdtree(centers, num_center, dim_vocab, 2);				

		string model_path(string(params.outputDir) + '/' + svm_model_name + ext);	
		string t_path_model = model_path;
		size_t idx_model = model_path.find_last_of('.');						
		t_path_model.insert(idx_model, "_info");
		int dim = 0;
		float* model[nr_classes];
		float bias[nr_classes];
		printf("Loading SVM model...\n");
		if(!is_file_exist(model_path.c_str()) && !is_file_exist(t_path_model.c_str()))
		{
			cout << "MODEL NOT FOUND\n";
			return;
		}
		else if (load_model(model_path, model, bias, &dim, nr_classes) < 0)
		{
			cout << "CORRUPT MODEL DATA\n";
		}	
		int fake_count = 0, live_count = 0;
		double* labels = GetLabels(imgs_url, "live", &fake_count, &live_count);
		double fsar = 0;
		double flrr = 0;
		float* results = (float*)malloc(sizeof(float)*db_size);
		//int* results = (int*)malloc(sizeof(int)*db_size);
		printf("Processing %d images\n", db_size);	
		timeb ini, end;	
		ftime(&ini);
	#pragma omp parallel for
		for (int i = 0; i < db_size; i++)
		{
			int real_label = (int)labels[i];	
		
			//printf("BoW encoding image %d\n", i);
			//Load offset for each image inside chunk
			Mat img_i = readImage(imgs_url[i]);
			if (img_i.empty()) {
				cout << "ERROR" << endl;
				continue;
			}	
				
			if(dsift_params.scale_factor > 1)
			{
				Mat temp;
				resize(img_i, temp, Size(img_i.cols*dsift_params.scale_factor, img_i.rows*dsift_params.scale_factor));
				img_i = temp;
			}

			vector<float> frames_denseSift;
			vector<float> desc = compute_for_image(img_i, dsift_params, frames_denseSift);								

			//DSIFT dimension reduction 								
			float* feat_proj = &desc[0];
			long tmp_size = (desc.size()/params.sift_dim)*dim;				

			float* enc = bovw::bovw_encoding(forest, centers, feat_proj, tmp_size/ dim, dim, num_center, img_i.cols, img_i.rows, &frames_denseSift[0]);
			
			double probability[nr_classes];
			int model_size = dim;
			for (int j = 0; j < nr_classes; j++)
			{
				probability[j] = 0;
				for (int k = 0; k < model_size; k++)
					probability[j] += (enc[k] * model[j][k]);
				probability[j] += bias[j];
			}		
			vl_free(enc);
			//int label = (MAX(probability[0], probability[1]) == probability[0]) ? -1: 1;
			//int label = (probability[0] > 0) ? 1 : -1;
			printf("Probability vector (%f, %f)\n", probability[0], probability[1]);
			results[i] = probability[1];		
			//results[i] = label;		
			//printf("Label prediction %i - real label %i\n", label, real_label);
				
		}
		ftime(&end);
		int end_time = (end.time - ini.time) * 1000 + (end.millitm - ini.millitm);
		printf("%d\n", end_time);		
		printf("%d\n", end_time/db_size);	
		for (int i = 0; i < nr_classes; i++)
			free(model[i]);
	

		/*for (int i = 0; i < db_size; i++)
		{
			int diff = results[i] + (int)labels[i];
			printf("Label prediction %i - real label %i\n", results[i], (int)labels[i]);
			if(diff == 0)
			{
				if (labels[i] == 1)
					flrr++;
				else
					fsar++;
			}
		}*/
		string output_path(params.outputDir);
		output_path += "/";
		output_path += params.database_name;
		output_path += ".txt";
		FILE* fl = fopen(output_path.c_str(), "wb");
		for (int i = 0; i < db_size; i++)
			fprintf(fl, "%f\n", results[i]);
		/*fprintf(fl, "Missclassified fake fingerprint = %f\n", fsar);
		fprintf(fl, "Missclassified live fingerprint = %f\n", flrr);

		printf("Missclassified fake fingerprint = %f\n", fsar);
		printf("Missclassified live fingerprint = %f\n", flrr);
		flrr /= (double)live_count;
		fsar /= (double)fake_count;
		double ace = (double)(flrr + fsar)/2;
		printf("FSAR value = %f\n", fsar);
		printf("FLRR value = %f\n", flrr);
		printf("ACE value = %f\n", 100*ace);

		fprintf(fl, "FSAR value = %f\n", fsar);
		fprintf(fl, "FLRR value = %f\n", flrr);
		fprintf(fl, "ACE value = %f\n", 100*ace);*/
		/*for (int i = 0; i < db_size; i++)
			fprintf(fl, "%f\n", results[i]);*/

		fclose(fl);
		vl_kdforest_delete(forest);
		free(labels);
		free(results);
		free(centers);	
	}
}
